<?xml version="1.0"?>
<doc>
    <assembly>
        <name>libtcodWrapper</name>
    </assembly>
    <members>
        <member name="T:libtcodWrapper.BackgroundFlag">
            <summary>
            Blending mode flags for the background object.
            </summary>
        </member>
        <member name="T:libtcodWrapper.KeyCode">
            <summary>
            Types of "special" keycodes"
            </summary>
        </member>
        <member name="T:libtcodWrapper.KeyPressType">
            <summary>
            Is event returned when key is pressed, release, or both?
            </summary>
        </member>
        <member name="T:libtcodWrapper.LineAlignment">
            <summary>
            Types of alignment for printing of strings
            </summary>
        </member>
        <member name="T:libtcodWrapper.SpecialCharacter">
            <summary>
            "Special" ascii characters such as arrows and lines
            </summary>
        </member>
        <member name="T:libtcodWrapper.CustomFontRequestFontTypes">
            <summary>
            Flags using for CustomFontRequest
            </summary>
        </member>
        <member name="T:libtcodWrapper.Color">
            <summary>
            Represents a 32-bit color to the TCOD API.
            </summary>
        </member>
        <member name="P:libtcodWrapper.Color.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:libtcodWrapper.Color.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:libtcodWrapper.Color.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="P:libtcodWrapper.Color.Hue">
            <summary>
            Hue (0.0 - 360.0)
            </summary>
        </member>
        <member name="P:libtcodWrapper.Color.Saturation">
            <summary>
            Saturation (0.0 - 1.0)
            </summary>
        </member>
        <member name="P:libtcodWrapper.Color.Value">
            <summary>
            Value (0.0 - 1.0)
            </summary>
        </member>
        <member name="M:libtcodWrapper.Color.FromRGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Form a Color from RGB components.
            </summary>
            <param name="red">Red Component (0 - 255)</param>
            <param name="green">Green Component (0 - 255)</param>
            <param name="blue">Blue Component (0 - 255)</param>
        </member>
        <member name="M:libtcodWrapper.Color.FromHSV(System.Single,System.Single,System.Single)">
            <summary>
            Form a Color from HSV components.
            </summary>
            <param name="hue">Hue Component (0.0 - 360.0)</param>
            <param name="saturation">Saturation Component (0.0 - 1.0)</param>
            <param name="value">Value Component (0.0 - 1.0)</param>
        </member>
        <member name="M:libtcodWrapper.Color.GetHSV(System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns HSV value from a Color.
            </summary>
            <param name="h">Hue Component (0.0 - 360.0)</param>
            <param name="s">Saturation Component (0.0 - 1.0)</param>
            <param name="v">Value Component (0.0 - 1.0)</param>
        </member>
        <member name="M:libtcodWrapper.Color.Equals(System.Object)">
            <summary>
            Determine if two Colors are equal.
            </summary>
            <param name="obj">Other Color</param>
            <returns>Are Equal?</returns>
        </member>
        <member name="M:libtcodWrapper.Color.GetHashCode">
            <summary>
            Calculate Hash Value of a Color
            </summary>
            <returns>Hash Value</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Equality(libtcodWrapper.Color,libtcodWrapper.Color)">
            <summary>
            Determine if two Colors are equal.
            </summary>
            <param name="lhs">Left Hand Size</param>
            <param name="rhs">Right Hand Size</param>
            <returns>Are Equal?</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Inequality(libtcodWrapper.Color,libtcodWrapper.Color)">
            <summary>
            Determine if two Colors are not equal.
            </summary>
            <param name="lhs">Left Hand Size</param>
            <param name="rhs">Right Hand Size</param>
            <returns>Are Not Equal?</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Addition(libtcodWrapper.Color,libtcodWrapper.Color)">
            <summary>
            Add two Colors
            </summary>
            <param name="lhs">Left Hand Size</param>
            <param name="rhs">Right Hand Size</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Multiply(libtcodWrapper.Color,libtcodWrapper.Color)">
            <summary>
            Multiply two Colors
            </summary>
            <param name="lhs">Left Hand Size</param>
            <param name="rhs">Right Hand Size</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Multiply(libtcodWrapper.Color,System.Single)">
            <summary>
            Multiple a Color by a constant
            </summary>
            <param name="lhs">Left Hand Size</param>
            <param name="rhs">Right Hand Size</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Multiply(libtcodWrapper.Color,System.Double)">
            <summary>
            Multiple a Color by a constant
            </summary>
            <param name="lhs">Left Hand Size</param>
            <param name="rhs">Right Hand Size</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Division(libtcodWrapper.Color,System.Int32)">
            <summary>
            Divide each component of a color by a give constant
            </summary>
            <param name="lhs">Left Hand Side Color</param>
            <param name="rhs">Right Hand Side Constant</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Division(libtcodWrapper.Color,System.Single)">
            <summary>
            Divide each component of a color by a give constant
            </summary>
            <param name="lhs">Left Hand Side Color</param>
            <param name="rhs">Right Hand Side Constant</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Division(libtcodWrapper.Color,System.Double)">
            <summary>
            Divide each component of a color by a give constant
            </summary>
            <param name="lhs">Left Hand Side Color</param>
            <param name="rhs">Right Hand Side Constant</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.op_Subtraction(libtcodWrapper.Color,libtcodWrapper.Color)">
            <summary>
            Subtract each component of a color from another, flooring to zero.
            </summary>
            <param name="lhs">Left Hand Side</param>
            <param name="rhs">Right Hand Side</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.Interpolate(libtcodWrapper.Color,libtcodWrapper.Color,System.Single)">
            <summary>
            Interpolate (lerp) a Color with another Color
            </summary>
            <param name="c1">First Color</param>
            <param name="c2">Second Color</param>
            <param name="coef">Interpolate Coefficient</param>
            <returns>New Color</returns>
        </member>
        <member name="M:libtcodWrapper.Color.Interpolate(libtcodWrapper.Color,libtcodWrapper.Color,System.Double)">
            <summary>
            Interpolate (lerp) a Color with another Color
            </summary>
            <param name="c1">First Color</param>
            <param name="c2">Second Color</param>
            <param name="coef">Interpolate Coefficient</param>
            <returns>New Color</returns>
        </member>
        <member name="T:libtcodWrapper.ColorPresets">
            <summary>
            A listing of the System.Drawing.Color preset colors, converted
            to the TCOD Color format.
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.AliceBlue">
            <summary>
            The color AliceBlue; RGB (240, 248, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.AntiqueWhite">
            <summary>
            The color AntiqueWhite; RGB (250, 235, 215)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Aqua">
            <summary>
            The color Aqua; RGB (0, 255, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Aquamarine">
            <summary>
            The color Aquamarine; RGB (127, 255, 212)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Azure">
            <summary>
            The color Azure; RGB (240, 255, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Beige">
            <summary>
            The color Beige; RGB (245, 245, 220)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Bisque">
            <summary>
            The color Bisque; RGB (255, 228, 196)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Black">
            <summary>
            The color Black; RGB (0, 0, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.BlanchedAlmond">
            <summary>
            The color BlanchedAlmond; RGB (255, 235, 205)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Blue">
            <summary>
            The color Blue; RGB (0, 0, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.BlueViolet">
            <summary>
            The color BlueViolet; RGB (138, 43, 226)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Brown">
            <summary>
            The color Brown; RGB (165, 42, 42)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.BurlyWood">
            <summary>
            The color BurlyWood; RGB (222, 184, 135)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.CadetBlue">
            <summary>
            The color CadetBlue; RGB (95, 158, 160)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Chartreuse">
            <summary>
            The color Chartreuse; RGB (127, 255, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Chocolate">
            <summary>
            The color Chocolate; RGB (210, 105, 30)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Coral">
            <summary>
            The color Coral; RGB (255, 127, 80)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.CornflowerBlue">
            <summary>
            The color CornflowerBlue; RGB (100, 149, 237)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Cornsilk">
            <summary>
            The color Cornsilk; RGB (255, 248, 220)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Crimson">
            <summary>
            The color Crimson; RGB (220, 20, 60)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Cyan">
            <summary>
            The color Cyan; RGB (0, 255, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkBlue">
            <summary>
            The color DarkBlue; RGB (0, 0, 139)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkCyan">
            <summary>
            The color DarkCyan; RGB (0, 139, 139)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkGoldenrod">
            <summary>
            The color DarkGoldenrod; RGB (184, 134, 11)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkGray">
            <summary>
            The color DarkGray; RGB (169, 169, 169)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkGreen">
            <summary>
            The color DarkGreen; RGB (0, 100, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkKhaki">
            <summary>
            The color DarkKhaki; RGB (189, 183, 107)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkMagenta">
            <summary>
            The color DarkMagenta; RGB (139, 0, 139)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkOliveGreen">
            <summary>
            The color DarkOliveGreen; RGB (85, 107, 47)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkOrange">
            <summary>
            The color DarkOrange; RGB (255, 140, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkOrchid">
            <summary>
            The color DarkOrchid; RGB (153, 50, 204)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkRed">
            <summary>
            The color DarkRed; RGB (139, 0, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkSalmon">
            <summary>
            The color DarkSalmon; RGB (233, 150, 122)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkSeaGreen">
            <summary>
            The color DarkSeaGreen; RGB (143, 188, 139)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkSlateBlue">
            <summary>
            The color DarkSlateBlue; RGB (72, 61, 139)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkSlateGray">
            <summary>
            The color DarkSlateGray; RGB (47, 79, 79)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkTurquoise">
            <summary>
            The color DarkTurquoise; RGB (0, 206, 209)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DarkViolet">
            <summary>
            The color DarkViolet; RGB (148, 0, 211)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DeepPink">
            <summary>
            The color DeepPink; RGB (255, 20, 147)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DeepSkyBlue">
            <summary>
            The color DeepSkyBlue; RGB (0, 191, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DimGray">
            <summary>
            The color DimGray; RGB (105, 105, 105)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.DodgerBlue">
            <summary>
            The color DodgerBlue; RGB (30, 144, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Firebrick">
            <summary>
            The color Firebrick; RGB (178, 34, 34)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.FloralWhite">
            <summary>
            The color FloralWhite; RGB (255, 250, 240)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.ForestGreen">
            <summary>
            The color ForestGreen; RGB (34, 139, 34)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Fuchsia">
            <summary>
            The color Fuchsia; RGB (255, 0, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Gainsboro">
            <summary>
            The color Gainsboro; RGB (220, 220, 220)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.GhostWhite">
            <summary>
            The color GhostWhite; RGB (248, 248, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Gold">
            <summary>
            The color Gold; RGB (255, 215, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Goldenrod">
            <summary>
            The color Goldenrod; RGB (218, 165, 32)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Gray">
            <summary>
            The color Gray; RGB (128, 128, 128)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Green">
            <summary>
            The color Green; RGB (0, 128, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.GreenYellow">
            <summary>
            The color GreenYellow; RGB (173, 255, 47)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Honeydew">
            <summary>
            The color Honeydew; RGB (240, 255, 240)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.HotPink">
            <summary>
            The color HotPink; RGB (255, 105, 180)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.IndianRed">
            <summary>
            The color IndianRed; RGB (205, 92, 92)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Indigo">
            <summary>
            The color Indigo; RGB (75, 0, 130)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Ivory">
            <summary>
            The color Ivory; RGB (255, 255, 240)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Khaki">
            <summary>
            The color Khaki; RGB (240, 230, 140)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Lavender">
            <summary>
            The color Lavender; RGB (230, 230, 250)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LavenderBlush">
            <summary>
            The color LavenderBlush; RGB (255, 240, 245)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LawnGreen">
            <summary>
            The color LawnGreen; RGB (124, 252, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LemonChiffon">
            <summary>
            The color LemonChiffon; RGB (255, 250, 205)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightBlue">
            <summary>
            The color LightBlue; RGB (173, 216, 230)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightCoral">
            <summary>
            The color LightCoral; RGB (240, 128, 128)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightCyan">
            <summary>
            The color LightCyan; RGB (224, 255, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightGoldenrodYellow">
            <summary>
            The color LightGoldenrodYellow; RGB (250, 250, 210)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightGray">
            <summary>
            The color LightGray; RGB (211, 211, 211)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightGreen">
            <summary>
            The color LightGreen; RGB (144, 238, 144)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightPink">
            <summary>
            The color LightPink; RGB (255, 182, 193)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightSalmon">
            <summary>
            The color LightSalmon; RGB (255, 160, 122)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightSeaGreen">
            <summary>
            The color LightSeaGreen; RGB (32, 178, 170)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightSkyBlue">
            <summary>
            The color LightSkyBlue; RGB (135, 206, 250)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightSlateGray">
            <summary>
            The color LightSlateGray; RGB (119, 136, 153)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightSteelBlue">
            <summary>
            The color LightSteelBlue; RGB (176, 196, 222)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LightYellow">
            <summary>
            The color LightYellow; RGB (255, 255, 224)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Lime">
            <summary>
            The color Lime; RGB (0, 255, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.LimeGreen">
            <summary>
            The color LimeGreen; RGB (50, 205, 50)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Linen">
            <summary>
            The color Linen; RGB (250, 240, 230)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Magenta">
            <summary>
            The color Magenta; RGB (255, 0, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Maroon">
            <summary>
            The color Maroon; RGB (128, 0, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumAquamarine">
            <summary>
            The color MediumAquamarine; RGB (102, 205, 170)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumBlue">
            <summary>
            The color MediumBlue; RGB (0, 0, 205)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumOrchid">
            <summary>
            The color MediumOrchid; RGB (186, 85, 211)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumPurple">
            <summary>
            The color MediumPurple; RGB (147, 112, 219)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumSeaGreen">
            <summary>
            The color MediumSeaGreen; RGB (60, 179, 113)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumSlateBlue">
            <summary>
            The color MediumSlateBlue; RGB (123, 104, 238)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumSpringGreen">
            <summary>
            The color MediumSpringGreen; RGB (0, 250, 154)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumTurquoise">
            <summary>
            The color MediumTurquoise; RGB (72, 209, 204)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MediumVioletRed">
            <summary>
            The color MediumVioletRed; RGB (199, 21, 133)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MidnightBlue">
            <summary>
            The color MidnightBlue; RGB (25, 25, 112)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MintCream">
            <summary>
            The color MintCream; RGB (245, 255, 250)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.MistyRose">
            <summary>
            The color MistyRose; RGB (255, 228, 225)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Moccasin">
            <summary>
            The color Moccasin; RGB (255, 228, 181)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.NavajoWhite">
            <summary>
            The color NavajoWhite; RGB (255, 222, 173)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Navy">
            <summary>
            The color Navy; RGB (0, 0, 128)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.OldLace">
            <summary>
            The color OldLace; RGB (253, 245, 230)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Olive">
            <summary>
            The color Olive; RGB (128, 128, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.OliveDrab">
            <summary>
            The color OliveDrab; RGB (107, 142, 35)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Orange">
            <summary>
            The color Orange; RGB (255, 165, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.OrangeRed">
            <summary>
            The color OrangeRed; RGB (255, 69, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Orchid">
            <summary>
            The color Orchid; RGB (218, 112, 214)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.PaleGoldenrod">
            <summary>
            The color PaleGoldenrod; RGB (238, 232, 170)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.PaleGreen">
            <summary>
            The color PaleGreen; RGB (152, 251, 152)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.PaleTurquoise">
            <summary>
            The color PaleTurquoise; RGB (175, 238, 238)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.PaleVioletRed">
            <summary>
            The color PaleVioletRed; RGB (219, 112, 147)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.PapayaWhip">
            <summary>
            The color PapayaWhip; RGB (255, 239, 213)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.PeachPuff">
            <summary>
            The color PeachPuff; RGB (255, 218, 185)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Peru">
            <summary>
            The color Peru; RGB (205, 133, 63)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Pink">
            <summary>
            The color Pink; RGB (255, 192, 203)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Plum">
            <summary>
            The color Plum; RGB (221, 160, 221)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.PowderBlue">
            <summary>
            The color PowderBlue; RGB (176, 224, 230)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Purple">
            <summary>
            The color Purple; RGB (128, 0, 128)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Red">
            <summary>
            The color Red; RGB (255, 0, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.RosyBrown">
            <summary>
            The color RosyBrown; RGB (188, 143, 143)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.RoyalBlue">
            <summary>
            The color RoyalBlue; RGB (65, 105, 225)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SaddleBrown">
            <summary>
            The color SaddleBrown; RGB (139, 69, 19)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Salmon">
            <summary>
            The color Salmon; RGB (250, 128, 114)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SandyBrown">
            <summary>
            The color SandyBrown; RGB (244, 164, 96)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SeaGreen">
            <summary>
            The color SeaGreen; RGB (46, 139, 87)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SeaShell">
            <summary>
            The color SeaShell; RGB (255, 245, 238)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Sienna">
            <summary>
            The color Sienna; RGB (160, 82, 45)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Silver">
            <summary>
            The color Silver; RGB (192, 192, 192)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SkyBlue">
            <summary>
            The color SkyBlue; RGB (135, 206, 235)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SlateBlue">
            <summary>
            The color SlateBlue; RGB (106, 90, 205)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SlateGray">
            <summary>
            The color SlateGray; RGB (112, 128, 144)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Snow">
            <summary>
            The color Snow; RGB (255, 250, 250)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SpringGreen">
            <summary>
            The color SpringGreen; RGB (0, 255, 127)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.SteelBlue">
            <summary>
            The color SteelBlue; RGB (70, 130, 180)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Tan">
            <summary>
            The color Tan; RGB (210, 180, 140)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Teal">
            <summary>
            The color Teal; RGB (0, 128, 128)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Thistle">
            <summary>
            The color Thistle; RGB (216, 191, 216)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Tomato">
            <summary>
            The color Tomato; RGB (255, 99, 71)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Turquoise">
            <summary>
            The color Turquoise; RGB (64, 224, 208)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Violet">
            <summary>
            The color Violet; RGB (238, 130, 238)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Wheat">
            <summary>
            The color Wheat; RGB (245, 222, 179)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.White">
            <summary>
            The color White; RGB (255, 255, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.WhiteSmoke">
            <summary>
            The color WhiteSmoke; RGB (245, 245, 245)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.Yellow">
            <summary>
            The color Yellow; RGB (255, 255, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.ColorPresets.YellowGreen">
            <summary>
            The color YellowGreen; RGB (154, 205, 50)
            </summary>
        </member>
        <member name="T:libtcodWrapper.TCODColorPresets">
            <summary>
            A listing of the default TCOD preset colors.
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Black">
            <summary>
            The color Black; RGB (0, 0, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.DarkGray">
            <summary>
            The color DarkGray; RGB (96, 96, 96)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Gray">
            <summary>
            The color Gray; RGB (196, 196, 196)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.White">
            <summary>
            The color White; RGB (255, 255, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.DarkBlue">
            <summary>
            The color DarkBlue; RGB (40, 40, 128)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.BrightBlue">
            <summary>
            The color BrightBlue; RGB (120, 120, 255)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.DarkRed">
            <summary>
            The color DarkRed; RGB (128, 0, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Red">
            <summary>
            The color NormalRed; RGB (255, 0, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.BrightRed">
            <summary>
            The color BrightRed; RGB (255, 100, 50)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Brown">
            <summary>
            The color Brown; RGB (32, 16, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.BrightYellow">
            <summary>
            The color BrightYellow; RGB (255, 255, 150)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Yellow">
            <summary>
            The color Yellow; RGB (255, 255, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.DarkYellow">
            <summary>
            The color DarkYellow; RGB (164, 164, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.BrightGreen">
            <summary>
            The color BrightGreen; RGB (0, 255, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Green">
            <summary>
            The color Green; RGB (0, 220, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.DarkGreen">
            <summary>
            The color DarkGreen; RGB (0, 128, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Orange">
            <summary>
            The color Orange; RGB (255, 150, 0)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Silver">
            <summary>
            The color Silver; RGB (203, 203, 203)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Gold">
            <summary>
            The color Gold; RGB (255, 255, 102)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.Purple">
            <summary>
            The color Purple; RGB (204, 51, 153)
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODColorPresets.DarkPurple">
            <summary>
            The color DarkPurple; RGB (51, 0, 51)
            </summary>
        </member>
        <member name="F:libtcodWrapper.DLLName.name">
            <summary>
            Defines the name of the DLL we look for on disk. The runtime adds {.dll,.so} to the end
            </summary>
        </member>
        <member name="T:libtcodWrapper.Background">
            <summary>
            Defines how draw operations affect background of the console.
            </summary>
        </member>
        <member name="F:libtcodWrapper.Background.None">
            <summary>
            Background constant for no background change.
            </summary>
        </member>
        <member name="M:libtcodWrapper.Background.#ctor(libtcodWrapper.BackgroundFlag)">
            <summary>
            Create background with a given flag that does not take alpha paramater
            </summary>
            <param name="flag">Background Type</param>
        </member>
        <member name="M:libtcodWrapper.Background.#ctor(libtcodWrapper.BackgroundFlag,System.Single)">
            <summary>
            Create background with a given flag that does take alpha paramater
            </summary>
            <param name="flag">Background Type</param>
            <param name="val">Alpha Value</param>
        </member>
        <member name="M:libtcodWrapper.Background.#ctor(libtcodWrapper.BackgroundFlag,System.Double)">
            <summary>
            Create background with a given flag that does take alpha paramater
            </summary>
            <param name="flag">Background Type</param>
            <param name="val">Alpha Value</param>
        </member>
        <member name="M:libtcodWrapper.Background.#ctor(libtcodWrapper.Background)">
            <summary>
            Create a copy of a background flag 
            </summary>
            <param name="b">Background to copy</param>
        </member>
        <member name="M:libtcodWrapper.Background.op_Increment(libtcodWrapper.Background)">
            <summary>
            Increment background type to next background in BackgroundFlag enum
            </summary>
            <param name="lhs">Left Hand Side</param>
            <returns>New Background</returns>
        </member>
        <member name="M:libtcodWrapper.Background.op_Decrement(libtcodWrapper.Background)">
            <summary>
            Decrement background type to next background in BackgroundFlag enum
            </summary>
            <param name="lhs">Left Hand Side</param>
            <returns>New Background</returns>
        </member>
        <member name="P:libtcodWrapper.Background.BackgroundFlag">
            <summary>
            Get Current Background Type
            </summary>
            <returns>Background Enum</returns>
        </member>
        <member name="P:libtcodWrapper.Background.AlphaValue">
            <summary>
            Get Current Alpha value
            </summary>
        </member>
        <member name="T:libtcodWrapper.CustomFontRequest">
            <summary>
            Request for console to draw with font other than "terminal.bmp"
            </summary>
        </member>
        <member name="M:libtcodWrapper.CustomFontRequest.#ctor(System.String,System.Int32,System.Int32,libtcodWrapper.CustomFontRequestFontTypes)">
            <summary>
            Create new custom font request
            </summary>
            <param name="fontFile">File name to load font from</param>
            <param name="char_width">Pixels each character is wide</param>
            <param name="char_height">Pixels each character is high</param>
            <param name="type">Determines for custom font</param>
        </member>
        <member name="T:libtcodWrapper.Console">
            <summary>
            Represents any console, either on screen or off
            </summary>
        </member>
        <member name="M:libtcodWrapper.Console.Dispose">
            <summary>
            Destory unmanaged console resources
            </summary>
        </member>
        <member name="M:libtcodWrapper.Console.GetConsoleWidth">
            <summary>
            Returns console's width
            </summary>
            <returns>Width</returns>
        </member>
        <member name="M:libtcodWrapper.Console.GetConsoleHeight">
            <summary>
            Returns console's height
            </summary>
            <returns>Height</returns>
        </member>
        <member name="P:libtcodWrapper.Console.ForegroundColor">
            <summary>
            Gets/sets the default foreground color of the console.
            </summary>
        </member>
        <member name="P:libtcodWrapper.Console.BackgroundColor">
            <summary>
            Gets/sets the default background color of the console.
            </summary>
        </member>
        <member name="M:libtcodWrapper.Console.Clear">
            <summary>
            Clear the console by setting each cell to default background, foreground color, and ascii value to ' '
            </summary>
        </member>
        <member name="M:libtcodWrapper.Console.PutChar(System.Int32,System.Int32,System.Char,libtcodWrapper.Background)">
            <summary>
            Put ascii character onto console
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <param name="c">Ascii character</param>
            <param name="flag">Background flag</param>
        </member>
        <member name="M:libtcodWrapper.Console.PutChar(System.Int32,System.Int32,System.Byte,libtcodWrapper.Background)">
            <summary>
            Put ascii character onto console
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <param name="c">SpecialCharacter or ascii byte</param>
            <param name="flag">Background flag</param>
        </member>
        <member name="M:libtcodWrapper.Console.PutChar(System.Int32,System.Int32,System.Char)">
            <summary>
            Put ascii character onto console
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <param name="c">Ascii character</param>
        </member>
        <member name="M:libtcodWrapper.Console.PutChar(System.Int32,System.Int32,System.Byte)">
            <summary>
            Put ascii character onto console
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <param name="c">Ascii character</param>
        </member>
        <member name="M:libtcodWrapper.Console.SetCharBackground(System.Int32,System.Int32,libtcodWrapper.Color,libtcodWrapper.Background)">
            <summary>
            Set background color of single cell
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <param name="col">Background color</param>
            <param name="flag">Background flag</param>
        </member>
        <member name="M:libtcodWrapper.Console.SetCharBackground(System.Int32,System.Int32,libtcodWrapper.Color)">
            <summary>
            Set background color of single cell
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <param name="col">Background color</param>
        </member>
        <member name="M:libtcodWrapper.Console.SetCharForeground(System.Int32,System.Int32,libtcodWrapper.Color)">
            <summary>
            Set foreground color of single cell
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <param name="col">Foreground color</param>
        </member>
        <member name="M:libtcodWrapper.Console.GetCharBackground(System.Int32,System.Int32)">
            <summary>
            Get Background of single cell
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <returns>Background color</returns>
        </member>
        <member name="M:libtcodWrapper.Console.GetCharForeground(System.Int32,System.Int32)">
            <summary>
            Get Forground of single cell
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <returns>Forground color</returns>
        </member>
        <member name="M:libtcodWrapper.Console.GetChar(System.Int32,System.Int32)">
            <summary>
            Get ascii value of single cell
            </summary>
            <param name="x">x (Width) position</param>
            <param name="y">y (Height) position</param>
            <returns>Ascii value</returns>
        </member>
        <member name="M:libtcodWrapper.Console.PrintLine(System.String,System.Int32,System.Int32,libtcodWrapper.LineAlignment)">
            <summary>
            Print string to line of console, using default foreground/background colors
            </summary>
            <param name="str">String to print</param>
            <param name="x">x (Width) position of first character</param>
            <param name="y">y (Height) position of first character</param>
            <param name="align">Alignment of string</param>
        </member>
        <member name="M:libtcodWrapper.Console.PrintLine(System.String,System.Int32,System.Int32,libtcodWrapper.Background,libtcodWrapper.LineAlignment)">
            <summary>
            Print string to line of console, using default foreground/background colors
            </summary>
            <param name="str">String to print</param>
            <param name="x">x (Width) position of first character</param>
            <param name="y">y (Height) position of first character</param>
            <param name="flag">Background flag</param>
            <param name="align">Alignment of string</param>
        </member>
        <member name="M:libtcodWrapper.Console.PrintLineRect(System.String,System.Int32,System.Int32,System.Int32,System.Int32,libtcodWrapper.LineAlignment)">
            <summary>
            Print aligned string inside the defined rectangle, truncating if bottom is reached
            </summary>
            <param name="str">String to print</param>
            <param name="x">x (Width) position of first character</param>
            <param name="y">y (Height) position of first character</param>
            <param name="w">Width of rectangle to print in</param>
            <param name="h">Height of rectangle to print in. If 0, string is only truncated if reaches bottom of console.</param>
            <param name="align">Alignment of string</param>
            <returns>Number of lines printed</returns>
        </member>
        <member name="M:libtcodWrapper.Console.PrintLineRect(System.String,System.Int32,System.Int32,System.Int32,System.Int32,libtcodWrapper.Background,libtcodWrapper.LineAlignment)">
            <summary>
            Print aligned string inside the defined rectangle, truncating if bottom is reached
            </summary>
            <param name="str">String to print</param>
            <param name="x">x (Width) position of first character</param>
            <param name="y">y (Height) position of first character</param>
            <param name="w">Width of rectangle to print in</param>
            <param name="h">Height of rectangle to print in. If 0, string is only truncated if reaches bottom of console.</param>
            <param name="flag">Background flag</param>
            <param name="align">Alignment of string</param>
            <returns>Number of lines printed</returns>
        </member>
        <member name="M:libtcodWrapper.Console.Blit(System.Int32,System.Int32,System.Int32,System.Int32,libtcodWrapper.Console,System.Int32,System.Int32)">
            <summary>
            Blit console onto another console
            </summary>
            <param name="xSrc">Upper left corner x coord of area to blit from</param>
            <param name="ySrc">Upper left corner y coord of area to blit from</param>
            <param name="wSrc">Width of source area</param>
            <param name="hSrc">Height of source area</param>
            <param name="dest">Destination console</param>
            <param name="xDst">Upper left corner x coord of area to blit to</param>
            <param name="yDst">Upper left corner y coord of area to blit to</param>
        </member>
        <member name="M:libtcodWrapper.Console.Blit(System.Int32,System.Int32,System.Int32,System.Int32,libtcodWrapper.Console,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blit console onto another console
            </summary>
            <param name="xSrc">Upper left corner x coord of area to blit from</param>
            <param name="ySrc">Upper left corner y coord of area to blit from</param>
            <param name="wSrc">Width of source area</param>
            <param name="hSrc">Height of source area</param>
            <param name="dest">Destination console</param>
            <param name="xDst">Upper left corner x coord of area to blit to</param>
            <param name="yDst">Upper left corner y coord of area to blit to</param>
            <param name="fade">Transparency of blitted console. 255 = fully replace destination. (0-254) simulate real transparency with varying degrees of fading.</param>
        </member>
        <member name="M:libtcodWrapper.Console.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,libtcodWrapper.Background)">
            <summary>
            Draw rectangle of color to console, setting background color to default
            </summary>
            <param name="x">Upper left corner x coord</param>
            <param name="y">Upper left corner y coord</param>
            <param name="w">Width of rectangle</param>
            <param name="h">Height of rectangle</param>
            <param name="clear">Clear cells of any ascii character</param>
            <param name="flag">Background flag</param>
        </member>
        <member name="M:libtcodWrapper.Console.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw rectangle of color to console, setting background color to default
            </summary>
            <param name="x">Upper left corner x coord</param>
            <param name="y">Upper left corner y coord</param>
            <param name="w">Width of rectangle</param>
            <param name="h">Height of rectangle</param>
            <param name="clear">Clear cells of any ascii character</param>
        </member>
        <member name="M:libtcodWrapper.Console.DrawHLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw horizontal line using default background/foreground color
            </summary>
            <param name="x">Left endpoint x coord</param>
            <param name="y">Left endpoint y coord</param>
            <param name="l">Length</param>
        </member>
        <member name="M:libtcodWrapper.Console.DrawVLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw vertical line using default background/foreground color
            </summary>
            <param name="x">Upper endpoint x coord</param>
            <param name="y">Upper endpoint y coord</param>
            <param name="l">Length</param>
        </member>
        <member name="M:libtcodWrapper.Console.DrawFrame(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Draw "Frame" with title onto console
            </summary>
            <param name="x">Upper left corner x coord</param>
            <param name="y">Upper left corner y coord</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="clear">Clear area</param>
            <param name="str">Title of frame</param>
        </member>
        <member name="M:libtcodWrapper.Console.DrawFrame(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw "Frame" with title onto console
            </summary>
            <param name="x">Upper left corner x coord</param>
            <param name="y">Upper left corner y coord</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="clear">Clear area</param>
        </member>
        <member name="M:libtcodWrapper.Console.ConsoleCredits">
            <summary>
            Print a "Powered by libtcod x.y.z" screen. Skippable by pressing any key.
            </summary>
        </member>
        <member name="M:libtcodWrapper.Console.ConsoleCreditsRender(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Render a frame of "Powered by libtcod x.y.z" onto screen.
            </summary>
            <param name="x">X Position of credits</param>
            <param name="y">Y Position of credits</param>
            <param name="alpha">If true, credits are transparently added on top of the existing screen. For this to work, this function must be placed between your screen rendering code and the console flush.</param>
            <returns>true when the credits screen is finished, indicating that you no longer need to call it.</returns>
        </member>
        <member name="T:libtcodWrapper.RootConsole">
            <summary>
            "Root" console, one which blits onto window or fullscreen
            </summary>
        </member>
        <member name="M:libtcodWrapper.RootConsole.#ctor(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Create the root console with the default font
            </summary>
            <param name="w">Width in characters</param>
            <param name="h">Height in characters</param>
            <param name="title">Title of window</param>
            <param name="fullscreen">Fullscreen?</param>
        </member>
        <member name="M:libtcodWrapper.RootConsole.#ctor(System.Int32,System.Int32,System.String,System.Boolean,libtcodWrapper.CustomFontRequest)">
            <summary>
            Create the root console with custom font
            </summary>
            <param name="w">Width in characters</param>
            <param name="h">Height in characters</param>
            <param name="title">Title of window</param>
            <param name="fullscreen">Fullscreen?</param>
            <param name="font">Custom font request</param>
        </member>
        <member name="M:libtcodWrapper.RootConsole.IsWindowClosed">
            <summary>
            Has the window been closed by the user
            </summary>
            <returns>Is Window Closed?</returns>
        </member>
        <member name="M:libtcodWrapper.RootConsole.Flush">
            <summary>
            "Flush" console by rendering new frame
            </summary>
        </member>
        <member name="M:libtcodWrapper.RootConsole.SetFade(System.Byte,libtcodWrapper.Color)">
            <summary>
            Fade console to specified color
            </summary>
            <param name="fade">Fading amount (0 {fully faded} - 255 {no fade} )</param>
            <param name="fadingColor">Color to fade to</param>
        </member>
        <member name="M:libtcodWrapper.RootConsole.GetFadeLevel">
            <summary>
            Get current fade level
            </summary>
            <returns>Fading amount (0 {fully faded} - 255 {no fade} )</returns>
        </member>
        <member name="M:libtcodWrapper.RootConsole.GetFadeColor">
            <summary>
            Get current fade color
            </summary>
            <returns>Fade Color</returns>
        </member>
        <member name="M:libtcodWrapper.RootConsole.SetFullscreen(System.Boolean)">
            <summary>
            Set console full screen status
            </summary>
            <param name="fullScreen">Fullscreen?</param>
        </member>
        <member name="M:libtcodWrapper.RootConsole.IsFullscreen">
            <summary>
            Is console currently fullscreen
            </summary>
            <returns>Fullscreen?</returns>
        </member>
        <member name="M:libtcodWrapper.RootConsole.SetTitle(System.String)">
            <summary>
            Set title once console is created
            </summary>
            <param name="title">Title</param>
        </member>
        <member name="M:libtcodWrapper.RootConsole.GetNewConsole(System.Int32,System.Int32)">
            <summary>
            Create new offscreen (secondary) console 
            </summary>
            <param name="w">Width in characters</param>
            <param name="h">Height in characters</param>
            <returns>New console</returns>
        </member>
        <member name="P:libtcodWrapper.RootConsole.Width">
            <summary>
            Width, in tiles, of the root console window. Attempting to reset
            this once GetInstance() has been called will result in an exception.
            </summary>
        </member>
        <member name="P:libtcodWrapper.RootConsole.Height">
            <summary>
            Height, in tiles, of the root console window. Attempting to reset
            this once GetInstance() has been called will result in an exception.
            </summary>
        </member>
        <member name="P:libtcodWrapper.RootConsole.WindowTitle">
            <summary>
            Title for the root console window. Attempting to reset
            this once GetInstance() has been called will result in an exception.
            </summary>
        </member>
        <member name="P:libtcodWrapper.RootConsole.Fullscreen">
            <summary>
            Whether or not to run the application full-screen. Attempting to reset
            this once GetInstance() has been called will result in an exception.
            </summary>
        </member>
        <member name="P:libtcodWrapper.RootConsole.Font">
            <summary>
            Font data for a font other than the default "terminal.bmp".
            </summary>
        </member>
        <member name="M:libtcodWrapper.RootConsole.GetInstance">
            <summary>
            Modified singleton pattern. Creates the root console based on
            the behavior values in RootConsole.Width, RootConsole.Height,
            RootConsole.WindowTitle, RootConsole.Fullscreen, and
            RootConsole.Font, or gets the already-created console if one
            exists.
            </summary>
            <returns>
               The root console object.
            </returns>
        </member>
        <member name="T:libtcodWrapper.TCODException">
            <summary>
            Base exception class for libtcod-net.
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODException.#ctor(System.String)">
            <summary>
            Constructor. Wraps System.Exception's constructor.
            </summary>
            <param name="message">
            Message to include in the exception.
            </param>
        </member>
        <member name="T:libtcodWrapper.TCODValueType">
            <summary>
            Types of values parsed from config file
            </summary>
        </member>
        <member name="T:libtcodWrapper.TCODValue">
            <summary>
            "Union" that holds value obtained from config file
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODValue.GetStringFromFieldS">
            <summary>
            Marshal a string from the fixed field 's'
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:libtcodWrapper.TCODDice">
            <summary>
            Hold dice-type ranges: [multiplier x] nb_dices d nb_faces [(+|-) addsub]
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODDice.nb_dices">
            <summary>
            Number of Dices
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODDice.nb_faces">
            <summary>
            Number of faces per side
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODDice.multiplier">
            <summary>
            Multiplier attached to dice roll
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODDice.addsub">
            <summary>
            Constant to add/subtract to dice roll
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODDice.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new TCODDice
            </summary>
            <param name="dices">Number of dice</param>
            <param name="faces">Number of face per dice</param>
            <param name="mult">Multiplier to roll</param>
            <param name="constant">Constant to add/subtract</param>
        </member>
        <member name="M:libtcodWrapper.TCODDice.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new TCODDice
            </summary>
            <param name="dices">Number of dice</param>
            <param name="faces">Number of face per dice</param>
        </member>
        <member name="M:libtcodWrapper.TCODDice.#ctor(libtcodWrapper.TCODDice)">
            <summary>
            Create Copy of TCODDIce
            </summary>
            <param name="d">Dice to copy</param>
        </member>
        <member name="M:libtcodWrapper.TCODDice.Equals(System.Object)">
            <summary>
            Compare two TCODDice
            </summary>
            <param name="obj">Other object</param>
            <returns>Are Equal?</returns>
        </member>
        <member name="M:libtcodWrapper.TCODDice.GetHashCode">
            <summary>
            Calculate Hash Value of a TCODDice
            </summary>
            <returns>Hash Value</returns>
        </member>
        <member name="M:libtcodWrapper.TCODDice.op_Equality(libtcodWrapper.TCODDice,libtcodWrapper.TCODDice)">
            <summary>
            Determine if two TCODDice are equal.
            </summary>
            <param name="lhs">Left Hand Side</param>
            <param name="rhs">Right Hand Side</param>
            <returns>Are Equal?</returns>
        </member>
        <member name="M:libtcodWrapper.TCODDice.op_Inequality(libtcodWrapper.TCODDice,libtcodWrapper.TCODDice)">
            <summary>
            Determine if two TCODDice are not equal.
            </summary>
            <param name="lhs">Left Hand Side</param>
            <param name="rhs">Right Hand Side</param>
            <returns>Are Not Equal?</returns>
        </member>
        <member name="T:libtcodWrapper.NewStructureCallback">
            <summary>
            Callback from parser when new structure is found
            </summary>
            <param name="str">New Structure</param>
            <param name="name">Structure Name</param>
            <returns>Return true if parsing is successful. False causes abort()</returns>
        </member>
        <member name="T:libtcodWrapper.NewFlagCallback">
            <summary>
            Callback from parser when new flag is found
            </summary>
            <param name="name">Name of flag</param>
            <returns>Return true if parsing is successful. False causes abort()</returns>
        </member>
        <member name="T:libtcodWrapper.NewPropertyCallback">
            <summary>
            Callback from parser when new property is found
            </summary>
            <param name="name">Name of new property</param>
            <param name="type">Type of new property</param>
            <param name="v">Value of new property</param>
            <returns>Return true if parsing is successful. False causes abort()</returns>
        </member>
        <member name="T:libtcodWrapper.EndStructureCallback">
            <summary>
            Callback from parser when end of structure is found
            </summary>
            <param name="str">Structure which end is found</param>
            <param name="name">Name of structure which end is found</param>
            <returns>Return true if parsing is successful. False causes abort()</returns>
        </member>
        <member name="T:libtcodWrapper.ErrorCallback">
            <summary>
            Callback from parser when parsing error occurs
            </summary>
            <param name="msg">Error message from parser</param>
        </member>
        <member name="T:libtcodWrapper.TCODParserCallbackStruct">
            <summary>
            Holds onto callbacks the parser uses to communicate.
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODParserCallbackStruct.#ctor(libtcodWrapper.NewStructureCallback,libtcodWrapper.NewFlagCallback,libtcodWrapper.NewPropertyCallback,libtcodWrapper.EndStructureCallback,libtcodWrapper.ErrorCallback)">
            <summary>
            Create CallbackStruct which passes callbacks to parser
            </summary>
            <param name="newStruct">Callback when new structure is found</param>
            <param name="newFlag">Callback when new flag is found</param>
            <param name="newProp">Callback when new property is found</param>
            <param name="endStruct">Callback when new of structure is found</param>
            <param name="error">Callback when parser comes across error</param>
        </member>
        <member name="M:libtcodWrapper.TCODParserCallbackStruct.ReturnErrorToParser(System.String)">
            <summary>
            If called in delegate handing parser events, will return string to be outputted along with position and abort the parsing.
            </summary>
            <param name="error">String explaining error</param>
        </member>
        <member name="T:libtcodWrapper.TCODFileParser">
            <summary>
            Parses configuration file
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.#ctor">
            <summary>
            Create new parser
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.Dispose">
            <summary>
            Destory unmanaged parser resource
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.Run(System.String,libtcodWrapper.TCODParserCallbackStruct@)">
            <summary>
            Run the parser with custom callbacks
            </summary>
            <param name="filename">Filename of configuration file</param>
            <param name="listener">Callbacks from parser</param>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.Run(System.String)">
            <summary>
            Run the parser with the default parser listener
            </summary>
            <param name="filename">Filename of configuration file</param>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.RegisterNewStructure(System.String)">
            <summary>
            Register a new structure with the parser
            </summary>
            <param name="name">Structure Name</param>
            <returns></returns>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.GetBoolProperty(System.String)">
            <summary>
            Get a boolean property from the default parser listener
            </summary>
            <param name="name">Property Name</param>
            <remarks>Use only if you use the default parser listener</remarks>
            <returns>Boolean Value of Property</returns>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.GetIntProperty(System.String)">
            <summary>
            Get a integer property from the default parser listener
            </summary>
            <param name="name">Property Name</param>
            /// <remarks>Use only if you use the default parser listener</remarks>
            <returns>Int Value of Property</returns>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.GetFloatProperty(System.String)">
            <summary>
            Get a float property from the default parser listener
            </summary>
            <param name="name">Property Name</param>
            /// <remarks>Use only if you use the default parser listener</remarks>
            <returns>Float Value of Property</returns>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.GetStringProperty(System.String)">
            <summary>
            Get a string property from the default parser listener
            </summary>
            <param name="name">Property Name</param>
            /// <remarks>Use only if you use the default parser listener</remarks>
            <returns>String Value of Property</returns>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.GetColorProperty(System.String)">
            <summary>
            Get a color property from the default parser listener
            </summary>
            <param name="name">Property Name</param>
            /// <remarks>Use only if you use the default parser listener</remarks>
            <returns>Color Value of Property</returns>
        </member>
        <member name="M:libtcodWrapper.TCODFileParser.GetDiceProperty(System.String)">
            <summary>
            Get the dice property from the default parser listener
            </summary>
            <param name="name">Property Name</param>
            /// <remarks>Use only if you use the default parser listener</remarks>
            <returns>Dice Value of Property</returns>
        </member>
        <member name="T:libtcodWrapper.TCODParserStructure">
            <summary>
            Created by RegisterNewStructure and represents one valid "structure in the config file"
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODParserStructure.AddFlag(System.String)">
            <summary>
            Add flag to structure
            </summary>
            <param name="name">Flag Name</param>
        </member>
        <member name="M:libtcodWrapper.TCODParserStructure.AddProperty(System.String,libtcodWrapper.TCODValueType,System.Boolean)">
            <summary>
            Add new property to structure
            </summary>
            <param name="name">Name of Property</param>
            <param name="type">Property Type</param>
            <param name="mandatory">Is Mandatory?</param>
        </member>
        <member name="M:libtcodWrapper.TCODParserStructure.AddValueList(System.String,System.String[],System.Boolean)">
            <summary>
            Add new "value list", set of possible string values
            </summary>
            <param name="name">Name of List</param>
            <param name="list">Possible Values</param>
            <param name="mandatory">Is Mandatory?</param>
        </member>
        <member name="M:libtcodWrapper.TCODParserStructure.AddSubStructure(libtcodWrapper.TCODParserStructure)">
            <summary>
            Add substructure to structure
            </summary>
            <param name="substructure">New Substructure to add</param>
        </member>
        <member name="M:libtcodWrapper.TCODParserStructure.GetName">
            <summary>
            Get Name of Structure
            </summary>
            <returns>Name</returns>
        </member>
        <member name="M:libtcodWrapper.TCODParserStructure.IsMandatory(System.String)">
            <summary>
            Returns if structure is a mandatory value
            </summary>
            <param name="name">Name of Structure</param>
            <returns>Is Mandatory?</returns>
        </member>
        <member name="M:libtcodWrapper.TCODParserStructure.GetType(System.String)">
            <summary>
            Get Value's type of structure
            </summary>
            <param name="name">Property's Name</param>
            <returns>Type</returns>
        </member>
        <member name="T:libtcodWrapper.TCODFov">
            <summary>
            Calculates Field Of View (FOV) information 
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODFov.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a representation of a given map 
            </summary>
            <param name="width">Width of map</param>
            <param name="height">Height of map</param>
        </member>
        <member name="M:libtcodWrapper.TCODFov.ClearMap">
            <summary>
            Reset map to all cells being blocking
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODFov.Dispose">
            <summary>
            Destory unmanaged FOV resource
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODFov.SetCell(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Set a map cell's properties
            </summary>
            <param name="x">x (width) to update</param>
            <param name="y">y (height) to update</param>
            <param name="transparent">Light can pass through cell?</param>
            <param name="walkable">Creatures can pass through cell?</param>
        </member>
        <member name="M:libtcodWrapper.TCODFov.GetCell(System.Int32,System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Get a map cell's properties
            </summary>
            <param name="x">x (width) to update</param>
            <param name="y">y (height) to update</param>
            <param name="transparent">Light can pass through cell?</param>
            <param name="walkable">Creatures can pass through cell?</param>
        </member>
        <member name="M:libtcodWrapper.TCODFov.CalculateFOV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Recalculate FOV information based upon player location and lighit radius
            </summary>
            <param name="playerX">Player x coord</param>
            <param name="playerY">Player y coor</param>
            <param name="radius">Radius of sight. 0 means unlimited sight radius</param>
        </member>
        <member name="M:libtcodWrapper.TCODFov.CheckTileFOV(System.Int32,System.Int32)">
            <summary>
            Is a cell currently visible?
            </summary>
            <param name="x">x coord of cell</param>
            <param name="y">y coord of cell</param>
            <returns>Is visible?</returns>
        </member>
        <member name="T:libtcodWrapper.Image">
            <summary>
            Represents an image loaded from disk or created in memory
            </summary>
        </member>
        <member name="M:libtcodWrapper.Image.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new image of a given side with root's background color (or black if none exists)
            </summary>
            <param name="width">Width of new image</param>
            <param name="height">Height of new image</param>
        </member>
        <member name="M:libtcodWrapper.Image.#ctor(System.String)">
            <summary>
            Loads a .bmp image from disk
            </summary>
            <param name="filename">Filename or path</param>
        </member>
        <member name="M:libtcodWrapper.Image.#ctor(libtcodWrapper.Console)">
            <summary>
            Create image from current console state
            </summary>
            <param name="console">Console to take image of</param>
        </member>
        <member name="M:libtcodWrapper.Image.Dispose">
            <summary>
            Destory unmanaged image resource
            </summary>
        </member>
        <member name="M:libtcodWrapper.Image.Clear(libtcodWrapper.Color)">
            <summary>
            Clear an image to a specific background color
            </summary>
            <param name="color">Color to clear to</param>
        </member>
        <member name="M:libtcodWrapper.Image.SaveImageToDisc(System.String)">
            <summary>
            Write image to disk as .bmp file
            </summary>
            <param name="filename">Filename to create</param>
        </member>
        <member name="M:libtcodWrapper.Image.GetSize(System.Int32@,System.Int32@)">
            <summary>
            Get the current image's size
            </summary>
            <param name="w">Width</param>
            <param name="h">Height</param>
        </member>
        <member name="M:libtcodWrapper.Image.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get color of specific pixel in image
            </summary>
            <param name="x">Width</param>
            <param name="y">Height</param>
            <returns></returns>
        </member>
        <member name="M:libtcodWrapper.Image.GetPixelTransparency(System.Int32,System.Int32)">
            <summary>
            Is current pixel "transparent", key color
            </summary>
            <param name="x">x coord</param>
            <param name="y">y coord</param>
            <returns>Is Transparent?</returns>
        </member>
        <member name="M:libtcodWrapper.Image.AverageColorOfRegion(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Use mipmaps to get average color of a region
            </summary>
            <param name="x0">Upper left corner x coord</param>
            <param name="y0">Upper left corner y coord</param>
            <param name="x1">Lower right corner x coord</param>
            <param name="y1">Lower right corner y coord</param>
            <returns></returns>
        </member>
        <member name="M:libtcodWrapper.Image.PutPixel(System.Int32,System.Int32,libtcodWrapper.Color)">
            <summary>
            Change color of given pixel
            </summary>
            <param name="x">x coord of pixel</param>
            <param name="y">y coord of pixel</param>
            <param name="col">Color to change pixel to</param>
        </member>
        <member name="M:libtcodWrapper.Image.SetKeyColor(libtcodWrapper.Color)">
            <summary>
            Set "Key Color", the transparent color of an image
            </summary>
            <param name="keyColor">Key Color</param>
        </member>
        <member name="M:libtcodWrapper.Image.Blit(libtcodWrapper.Console,System.Single,System.Single,libtcodWrapper.Background,System.Double,System.Double,System.Double)">
            <summary>
            Blit entire image onto console
            </summary>
            <param name="console">Console target</param>
            <param name="x">x coord of center of image on console</param>
            <param name="y">y coord of center of image on console</param>
            <param name="background">How image affects background color</param>
            <param name="scalex">Width scaling factor</param>
            <param name="scaley">Height scaling factor</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:libtcodWrapper.Image.BlitRect(libtcodWrapper.Console,System.Int32,System.Int32,System.Int32,System.Int32,libtcodWrapper.Background)">
            <summary>
            Blit part of a image to the console
            </summary>
            <param name="console">Console target</param>
            <param name="x">x coord of upper left of image on console</param>
            <param name="y">y coord of upper right of image on console</param>
            <param name="w">Width of part of image to blit</param>
            <param name="h">Height of part of image to blit</param>
            <param name="background">How image affects background color</param>
        </member>
        <member name="T:libtcodWrapper.KeyPress">
            <summary>
            Keystroke structure returned from Keyboard methods.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.KeyCode">
            <summary>
            Key code for the current button press.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.Character">
            <summary>
            The textual character of this keypress. Set iff
            KeyCode == KeyCode.TCODK_CHAR, otherwise zero.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.Pressed">
            <summary>
            Any key has been pressed.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.Alt">
            <summary>
            Modified by the press of either alt key.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.Control">
            <summary>
            Modified by the press of either control key.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.LeftAlt">
            <summary>
            Modified by the press of the left alt key.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.LeftControl">
            <summary>
            Modified by the press of the left control key.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.RightAlt">
            <summary>
            Modified by the press of the rightt alt key.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.RightControl">
            <summary>
            Modified by the press of the right control key.
            </summary>
        </member>
        <member name="P:libtcodWrapper.KeyPress.Shift">
            <summary>
            Modified by the press of either shift key.
            </summary>
        </member>
        <member name="T:libtcodWrapper.Keyboard">
            <summary>
            Holds static methods for interacting with keyboard
            </summary>
        </member>
        <member name="M:libtcodWrapper.Keyboard.WaitForKeyPress(System.Boolean)">
            <summary>
            Block until user presses key
            </summary>
            <param name="flushInputBuffer">Flush all outstanding keystrokes and wait for next stroke</param>
            <returns>Keypress</returns>
        </member>
        <member name="M:libtcodWrapper.Keyboard.CheckForKeypress(libtcodWrapper.KeyPressType)">
            <summary>
            Non-blockingly check for user key press
            </summary>
            <param name="pressFlags">Determines what type of events are returned</param>
            <returns>Keypress</returns>
        </member>
        <member name="M:libtcodWrapper.Keyboard.IsKeyPressed(libtcodWrapper.KeyCode)">
            <summary>
            Determine if a given key is currently being pressed
            </summary>
            <param name="key">Key in question</param>
            <returns>Is Key Pressed?</returns>
        </member>
        <member name="M:libtcodWrapper.Keyboard.SetRepeat(System.Int32,System.Int32)">
            <summary>
            Set repeat rate of keyboard
            </summary>
            <param name="initialDelay">How long before repeating</param>
            <param name="interval">How often afterwards to repeat</param>
        </member>
        <member name="M:libtcodWrapper.Keyboard.DisableRepeat">
            <summary>
            Disable all repeating of keystrokes
            </summary>
        </member>
        <member name="T:libtcodWrapper.TCODLineDrawing">
            <summary>
            Plots points of a line using Bresenham algorithm
            </summary>
            <remarks>This class is not thread safe, nor is it safe to use more than one "instance" at the same time</remarks>
        </member>
        <member name="M:libtcodWrapper.TCODLineDrawing.InitLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initalize line drawing toolkit with beginning and end point
            </summary>
            <param name="xFrom">Beginning x coord</param>
            <param name="yFrom">Beginning y coord</param>
            <param name="xTo">Ending x coord</param>
            <param name="yTo">Ending y coord</param>
        </member>
        <member name="M:libtcodWrapper.TCODLineDrawing.StepLine(System.Int32@,System.Int32@)">
            <summary>
            Step to the next point on the line
            </summary>
            <param name="xCur">x Coord of next point of line</param>
            <param name="yCur">y Coord of next point of line</param>
            <returns>True if endpoint reached</returns>
            <remarks>Note: xCur and yCur must be initialized to the point previous to the one you want 
            on the line. See TCOD documentation for more details.</remarks>
        </member>
        <member name="T:libtcodWrapper.TCODNoise">
            <summary>
            Generates various types of "noise" using libtcod perlin.
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.#ctor(System.Int32)">
            <summary>
            Create noise object.
            </summary>
            <param name="dimensions">Number of dimensions, for perlin and simplex value should be >0 and less than or equal to 4, and less than or equal to 3 for wavelet</param>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.#ctor(System.Int32,libtcodWrapper.TCODRandom)">
            <summary>
            Create noise object.
            </summary>
            <param name="dimensions">Number of dimensions</param>
            <param name="random">Random Generator</param>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Create noise object.
            </summary>
            <param name="dimensions">Number of dimensions</param>
            <param name="hurst">Hurst</param>
            <param name="lacunarity">Lacunarity</param>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.#ctor(System.Int32,System.Double,System.Double,libtcodWrapper.TCODRandom)">
            <summary>
            Create noise object.
            </summary>
            <param name="dimensions">Number of dimensions</param>
            <param name="hurst">Hurst</param>
            <param name="lacunarity">Lacunarity</param>
            <param name="random">Random Generator</param>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetPerlinNoise(System.Single[])">
            <summary>
            Get Perlin Noise
            </summary>
            <param name="f">An array of coordinates</param>
            <returns>Perlin noise for that point (-1.0 - 1.0) </returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetPerlinBrownianMotion(System.Single[],System.Single)">
            <summary>
            Get Perlin fractional Brownian Motion
            </summary>
            <param name="f">An array of coordinates</param>
            <param name="octaves">Number of iterations. (0-127)</param>
            <returns>Browian motion for that point (-1.0 - 1.0)</returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetPerlinTurbulence(System.Single[],System.Single)">
            <summary>
            Get Perlin Turbulence
            </summary>
            <param name="f">An array of coordinates</param>
            <param name="octaves">Number of iterations. (0-127)</param>
            <returns>Turbulence for that point (-1.0 - 1.0)</returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetSimplexNoise(System.Single[])">
            <summary>
            Get Simplex Noise
            </summary>
            <param name="f">An array of coordinates</param>
            <returns>Perlin noise for that point (-1.0 - 1.0) </returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetSimplexBrownianMotion(System.Single[],System.Single)">
            <summary>
            Get Simplex fractional Brownian Motion
            </summary>
            <param name="f">An array of coordinates</param>
            <param name="octaves">Number of iterations. (0-127)</param>
            <returns>Browian motion for that point (-1.0 - 1.0)</returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetSimplexTurbulence(System.Single[],System.Single)">
            <summary>
            Get Simplex Turbulence
            </summary>
            <param name="f">An array of coordinates</param>
            <param name="octaves">Number of iterations. (0-127)</param>
            <returns>Turbulence for that point (-1.0 - 1.0)</returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetWaveletNoise(System.Single[])">
            <summary>
            Get Wavelet Noise
            </summary>
            <param name="f">An array of coordinates</param>
            <returns>Perlin noise for that point (-1.0 - 1.0) </returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetWaveletBrownianMotion(System.Single[],System.Single)">
            <summary>
            Get Wavelet fractional Brownian Motion
            </summary>
            <param name="f">An array of coordinates</param>
            <param name="octaves">Number of iterations. (0-127)</param>
            <returns>Browian motion for that point (-1.0 - 1.0)</returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.GetWaveletTurbulence(System.Single[],System.Single)">
            <summary>
            Get Wavelet Turbulence
            </summary>
            <param name="f">An array of coordinates</param>
            <param name="octaves">Number of iterations. (0-127)</param>
            <returns>Turbulence for that point (-1.0 - 1.0)</returns>
        </member>
        <member name="M:libtcodWrapper.TCODNoise.Dispose">
            <summary>
            Destory unmanaged noice generator.
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODNoise.NoiseDefaultHurst">
            <summary>
            Default hurst value for noise generator
            </summary>
        </member>
        <member name="F:libtcodWrapper.TCODNoise.NoiseDefaultLacunarity">
            <summary>
            Default Lacunarity value for noise generator
            </summary>
        </member>
        <member name="T:libtcodWrapper.TCODPathCallback">
            <summary>
            Callback made from pathfinding engine to determine cell pathfinding information
            </summary>
            <param name="xFrom">staring x coord</param>
            <param name="yFrom">starting y coord</param>
            <param name="xTo">ending x coord</param>
            <param name="yTo">ending y coord</param>
            <returns>"Cost" to pass through cell</returns>
        </member>
        <member name="T:libtcodWrapper.TCODPathFinding">
            <summary>
            Calculates paths in maps using djikstra's algorithms
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.#ctor(System.Int32,System.Int32,System.Double,libtcodWrapper.TCODPathCallback)">
            <summary>
            Create a new TCODPathFinding with a callback to determine cell information
            </summary>
            <param name="width">Map Width</param>
            <param name="height">Map Height</param>
            <param name="diagonalCost">Factor diagonal moves cost more</param>
            <param name="callback">Callback from path finder</param>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.#ctor(libtcodWrapper.TCODFov,System.Double)">
            <summary>
            Create new TCODPathFinding using map from TCODFov instance
            </summary>
            <param name="fovMap">Existing map</param>
            <param name="diagonalCost">Factor diagonal moves cost more</param>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.ComputePath(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Compute a path from source to destination. 
            </summary>
            <param name="origX">Starting point x coord</param>
            <param name="origY">Starting point y coord</param>
            <param name="destX">Destination point x coord</param>
            <param name="destY">Destination point y coord</param>
            <returns>IsPathFound?</returns>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.WalkPath(System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Walk along a path. Fill x and y with previous step's coord to get next point.
            </summary>
            <param name="x">x coord</param>
            <param name="y">y coord</param>
            <param name="recalculateWhenNeeded">If path comes to abrupt end, can we spend time looking for route?</param>
            <returns>MoreToWalkAlong?</returns>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.GetPointOnPath(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Query individual point on path
            </summary>
            <param name="index">0-based index of points in path list</param>
            <param name="x">x coord of point</param>
            <param name="y">y coord of point</param>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.IsPathEmpty">
            <summary>
            Returns if path is empty of points
            </summary>
            <returns>IsEmpty?</returns>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.GetPathSize">
            <summary>
            Get remainding points on path
            </summary>
            <returns>Path Size</returns>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.GetPathOrigin(System.Int32@,System.Int32@)">
            <summary>
            Get the origin of the path
            </summary>
            <param name="x">x coord of origin</param>
            <param name="y">y coord of origin</param>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.GetPathDestination(System.Int32@,System.Int32@)">
            <summary>
            Get the destination of the path
            </summary>
            <param name="x">x coord of destination</param>
            <param name="y">y coord of destination</param>
        </member>
        <member name="M:libtcodWrapper.TCODPathFinding.Dispose">
            <summary>
            Destory unmanaged pathfinding resource.
            </summary>
        </member>
        <member name="T:libtcodWrapper.TCODRandom">
            <summary>
            Produces random numbers from the Mersenne Twister
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODRandom.#ctor">
            <summary>
            Create a new instance of a random number generator.
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODRandom.#ctor(System.UInt32)">
            <summary>
            Create new instance of a random number generator with a starting seed.
            </summary>
            <param name="seed">Intial Seed</param>
        </member>
        <member name="M:libtcodWrapper.TCODRandom.Dispose">
            <summary>
            Destroy unmanaged random number generator
            </summary>
        </member>
        <member name="M:libtcodWrapper.TCODRandom.GetRandomInt(System.Int32,System.Int32)">
            <summary>
            Obtain a random integer in a given range
            </summary>
            <param name="min">Minimum number to generate</param>
            <param name="max">Maximum number to generate</param>
            <returns>Random Number</returns>
        </member>
        <member name="M:libtcodWrapper.TCODRandom.GetRandomFloat(System.Double,System.Double)">
            <summary>
            Obtain a random floating point number in a given range
            </summary>
            <param name="min">Minimum number to generate</param>
            <param name="max">Maximum number to generate</param>
            <returns>Random Number</returns>
        </member>
        <member name="M:libtcodWrapper.TCODRandom.GetRandomFloat(System.Single,System.Single)">
            <summary>
            Obtain a random floating point number in a given range
            </summary>
            <param name="min">Minimum number to generate</param>
            <param name="max">Maximum number to generate</param>
            <returns>Random Number</returns>
        </member>
        <member name="M:libtcodWrapper.TCODRandom.GetIntFromByteArray(System.Int32,System.Int32,System.String)">
            <summary>
            Deterministly obtain a random number based upon a string seed
            </summary>
            <param name="min">Minimum number to generate</param>
            <param name="max">Maximum number to generate</param>
            <param name="data">String to be a seed</param>
            <returns>Random Number</returns>
        </member>
        <member name="T:libtcodWrapper.TCODSystem">
            <summary>
            Represents System Level Functions
            </summary>
        </member>
        <member name="P:libtcodWrapper.TCODSystem.ElapsedMilliseconds">
            <summary>
            Obtain number of milliseconds since the program started
            </summary>
            <returns>Milliseconds since the program started</returns>
        </member>
        <member name="P:libtcodWrapper.TCODSystem.ElapsedSeconds">
            <summary>
            Obtain number of seconds since the program started
            </summary>
            <returns>Seconds since the program started</returns>
        </member>
        <member name="M:libtcodWrapper.TCODSystem.Sleep(System.UInt32)">
            <summary>
            Stop program execution for specified amount of time
            </summary>
            <param name="milliseconds">Milliseconds to sleep</param>
        </member>
        <member name="M:libtcodWrapper.TCODSystem.SaveScreenshot(System.String)">
            <summary>
            Save a screenshot of the root console to disk
            </summary>
            <param name="fileName">Filename to save image to</param>
        </member>
        <member name="M:libtcodWrapper.TCODSystem.ForceFullscrenResolution(System.Int32,System.Int32)">
            <summary>
            Force specific resolution in fullscreen
            </summary>
            <param name="width">Fullscreen Width</param>
            <param name="height">Fullscreen Height</param>
        </member>
        <member name="P:libtcodWrapper.TCODSystem.CurrentResolution">
            <summary>
            The current screen resolution.
            </summary>
        </member>
        <member name="P:libtcodWrapper.TCODSystem.LastFrameLength">
            <summary>
            Return the length in seconds of the last rendered frame.
            </summary>
        </member>
        <member name="P:libtcodWrapper.TCODSystem.FPS">
            <summary>
            Get or set the current value of frames per second that
            the library will attempt to render.
            </summary>
        </member>
        <member name="T:libtcodWrapper.Mouse">
            <summary>
            Constains information about current mouse status
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.PixelX">
            <summary>
            Position in x direction in pixels
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.PixelY">
            <summary>
            Position in y direction in pixels
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.PixelLocation">
            <summary>
            Position of the mouse cursor.
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.PixelVelocityX">
            <summary>
            Mouse velocity in x direction in pixels
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.PixelVelocityY">
            <summary>
            Mouse velocity in y direction in pixels
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.CellX">
            <summary>
            Position in x directory in character sized blocks
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.CellY">
            <summary>
            Position in Y directory in character sized blocks
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.CellLocation">
            <summary>
            Position of the mouse cursor character sized blocks
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.CellVelocityX">
            <summary>
            Mouse velocity in x direction in character sized blocks
            </summary>
        </member>
        <member name="P:libtcodWrapper.Mouse.CellVelocityY">
            <summary>
            Mouse velocity in y direction in character sized blocks
            </summary>
        </member>
        <member name="M:libtcodWrapper.Mouse.ShowCursor(System.Boolean)">
            <summary>
            Changes visiblity of mouse while in our window(s)
            </summary>
            <param name="visible">Is mouse visible?</param>
        </member>
        <member name="P:libtcodWrapper.Mouse.IsVisible">
            <summary>
            Return if cursor is visible
            </summary>
            <returns>Is Visible?</returns>
        </member>
        <member name="M:libtcodWrapper.Mouse.MoveMouse(System.Int32,System.Int32)">
            <summary>
            Move user's mouse to that location
            </summary>
            <param name="x">Pixel x location</param>
            <param name="y">Pixel y location</param>
        </member>
        <member name="M:libtcodWrapper.Mouse.GetStatus">
            <summary>
            Get current mouse status
            </summary>
            <returns>Mouse struct with location, movement, and buttom presses</returns>
        </member>
    </members>
</doc>
